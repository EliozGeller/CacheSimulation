//
// Generated file, do not edit! Created by nedtool 5.6 from messages.msg.
//

#ifndef __CACHESIMULATION_MESSAGES_M_H
#define __CACHESIMULATION_MESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace cachesimulation {

/**
 * Class generated from <tt>messages.msg:19</tt> by nedtool.
 * <pre>
 * packet DataPacket
 * {
 *     uint64_t destination;
 *     uint64_t external_destination = 0;
 *     int miss_hop = 0;
 *     string id;
 * }
 * </pre>
 */
class DataPacket : public ::omnetpp::cPacket
{
  protected:
    uint64_t destination;
    uint64_t external_destination;
    int miss_hop;
    ::omnetpp::opp_string id;

  private:
    void copy(const DataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataPacket&);

  public:
    DataPacket(const char *name=nullptr, short kind=0);
    DataPacket(const DataPacket& other);
    virtual ~DataPacket();
    DataPacket& operator=(const DataPacket& other);
    virtual DataPacket *dup() const override {return new DataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint64_t getDestination() const;
    virtual void setDestination(uint64_t destination);
    virtual uint64_t getExternal_destination() const;
    virtual void setExternal_destination(uint64_t external_destination);
    virtual int getMiss_hop() const;
    virtual void setMiss_hop(int miss_hop);
    virtual const char * getId() const;
    virtual void setId(const char * id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg:27</tt> by nedtool.
 * <pre>
 * packet ControlPacket
 * {
 *     uint64_t rule;
 * }
 * </pre>
 */
class ControlPacket : public ::omnetpp::cPacket
{
  protected:
    uint64_t rule;

  private:
    void copy(const ControlPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ControlPacket&);

  public:
    ControlPacket(const char *name=nullptr, short kind=0);
    ControlPacket(const ControlPacket& other);
    virtual ~ControlPacket();
    ControlPacket& operator=(const ControlPacket& other);
    virtual ControlPacket *dup() const override {return new ControlPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint64_t getRule() const;
    virtual void setRule(uint64_t rule);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ControlPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ControlPacket& obj) {obj.parsimUnpack(b);}

} // namespace cachesimulation

#endif // ifndef __CACHESIMULATION_MESSAGES_M_H

