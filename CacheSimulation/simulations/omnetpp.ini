[General]

#hadoop 0.1-0.9 percentile  = {37323, 44195, 51067, 62988, 74908, 90229, 117556, 173830, 293768}
#wesearch 0.1-0.9 percentile = {6888, 20106, 27563, 41986, 71739, 193593, 838985, 1933313, 4853634}
#datamining 0.1-0.9 percentil = {203, 353, 560, 730, 1000, 1485, 3160, 10000, 400000}


#rates = {40000000, 100000000, 400000000, 900000000, 1000000000, 2000000000, 2500000000, 10000000000, 40000000000}
#400 M 0.1-0.9 percentil = {0 ,55658062, 62593416, 70927071, 82556950, 98284489, 121805866, 158245781, 231309663, 451566338}
#2.5 G  0.1-0.9 percentil = {0 ,555037325, 621504292, 704099360, 818901538, 980967951, 1242635857, 1645830947, 2437615808, 4777534806}


network = Network
cmdenv-status-frequency = 600s
# 10.5s,10.2s,10.1s,10.01s,10.001s,10.0001s,10.005s,10.05s,10.0005s,10.008s,10.03s,10.003s,10.006s,10.002s,10.0002s
sim-time-limit = ${endSim = 3.006s} #limit of simulation time 
Network.estimate_rate_interval = 0.5e-3

#0.052 s

#Parameters:
Network.rack[*].number_of_hosts = ${hosts = 5000}
Network.size_distribution = "size_distribution/${SizeDist = i-hadoop}.csv"
Network.scale = ${scale = 1}


#"${C = 50 , 100 , 150 , 200 , 300 , 500 , 800, 1000}"
Network.cache_size = "2222"

Network.NumOfToRs = 20
Network.NumOfAggregation = 1

#10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 200, 250, 300, 350, 400, 450, 500
#200, 400, 600, 800, 1000, 1200, 1400, 1500, 1600, 1800, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 6000, 7000, 8000, 9000, 10000

Network.tor[*].cache_size = ${cacheToR =  200}
Network.agg[*].cache_size = ${cacheAgg = 700, 1400, 2100, 2800, 3500, 4200, 4900, 5600, 6300, 7000}
Network.controllerswitch.cache_size = 10000


#${th = 37323, 44195, 51067, 62987.5, 74908, 90228.8, 117556, 173830., 293768., 223092956}"
Network.push_threshold_in_aggregation = ${th =   2.5e9 }
Network.push_threshold_in_controller_switch = ${th}



 
Network.total_rate_in_tor = "${rate = 1600000000000}" #1.6 Tbps

#test/aa - mean/800 and hadoop*800


#Network.output_file = "${S = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/}"
Network.output_file = "${S = my_results1/test/fast/end time = ${endSim} rate = 2.5G cacheAgg = ${cacheAgg} cacheToR = ${cacheToR} push threasholds = ${th}/}"
#Network.output_file = "${S = my_results/ccc/websearch scale = ${scale} cache = ${cache} th = ${th} hosts = ${hosts}/}"
#IMPORTANT!!!
#From a certain length of the string of S the text files are not written correctly, check before!!!!! Do not exceed a string length of 148

Network.run_elephant = false
Network.bandwidth_elephant_threshold = ""

Network.run_push = true


Network.record_traffic = false
Network.create_offline_traffic = false



output-scalar-file = "${S}scalar-file.sca"
output-vector-file = "${S}vector-file.vec"

#result-dir = my_results/ddd/aaa/
#output-scalar-file = "my_results/ddd/aaa${N}.sca"
#Network.output_file = "${resultdir}"




debug-on-errors = true
**.vector-recording =true



#result-dir = my_results/ccc/




Network.linedelay = 0.2





Network.tor[*].threshold = 2
Network.agg[*].threshold = 2
Network.controllerswitch.threshold = 1



Network.tor[*].Type = 1001
Network.agg[*].Type = 1002
Network.controllerswitch.Type = 1003





Network.rack[*].host[*].flow_appearance = ""
Network.rack[*].host[*].flow_size = ""
Network.policy_size = ""
#Network.cache_size = ""
Network.propagation_time = ""
Network.processing_time_on_data_packet_in_sw = ""
Network.processing_time_on_data_packet_in_controller = ""
Network.insertion_delay = ""
Network.eviction_delay = ""
Network.elephant_table_size = ""
Network.flush_elephant_time = ""
Network.check_for_elephant_time = ""
Network.elephant_sample_rx = ""

Network.already_requested_threshold = ""
#Network.push_threshold_in_aggregation = ""
#Network.push_threshold_in_controller_switch = ""
Network.cache_percentage = ""
Network.eviction_sample_size = ""
Network.inter_arrival_time_between_packets = ""
Network.inter_arrival_time_between_flowlets = ""
Network.inter_arrival_time_between_flows = ""
Network.large_flow = ""
Network.last_flow_appearance = "0"
Network.rack[*].last_flow_appearance = 0





